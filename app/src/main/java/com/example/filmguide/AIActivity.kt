package com.example.filmguide

import android.Manifest
import android.app.Activity
import android.content.ActivityNotFoundException
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.net.Uri
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.provider.MediaStore
import android.speech.RecognizerIntent
import android.util.Base64
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.LinearLayoutManager
import java.io.ByteArrayOutputStream
import java.io.InputStream
import com.example.filmguide.ai.AIChatService
import com.example.filmguide.databinding.ActivityAiactivityBinding
import com.example.filmguide.logic.model.ChatMessage
import com.example.filmguide.ui.ChatAdapter
import com.example.filmguide.logic.network.weather.RetrofitBuilder
import com.example.filmguide.logic.network.weather.WeatherService
import com.example.filmguide.utils.PrefsManager
import com.example.filmguide.utils.Utils_Date_Location
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.util.*
import java.util.Calendar

class AIActivity : AppCompatActivity() {
    private lateinit var binding: ActivityAiactivityBinding
    private lateinit var adapter: ChatAdapter
    private val messages = mutableListOf<ChatMessage>()
    private lateinit var aiChatService: AIChatService
    private val conversationHistory = mutableListOf<AIChatService.ChatMessage>()
    private var isAiResponding = false
    private var isDeepThinkingEnabled = false
    private var isWebSearchEnabled = true
    private var selectedImageUri: Uri? = null
    private val apiKey = "670ca929136a456992608cd2e794df24"
    private lateinit var locationUtils: Utils_Date_Location.LocationHelper
    private var currentCityName: String = ""
    private var currentWeatherInfo: String = ""

    companion object {
        private const val REQUEST_RECORD_AUDIO = 100
        private const val REQ_SPEECH = 101
        private const val PICK_IMAGE_REQUEST_CODE = 1
    }

    // ÂõæÁâáÈÄâÊã©Âô®
    private val imagePickerLauncher = registerForActivityResult(
        ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        uri?.let {
            selectedImageUri = it
            android.util.Log.d("AIActivity", "ÂõæÁâáÂ∑≤ÈÄâÊã©: $it")
            Toast.makeText(this, "ÂõæÁâáÂ∑≤ÈÄâÊã©ÔºåÂèØ‰ª•ÂèëÈÄÅÁªôAIÂàÜÊûê", Toast.LENGTH_SHORT).show()
        } ?: run {
            android.util.Log.d("AIActivity", "ÂõæÁâáÈÄâÊã©Ë¢´ÂèñÊ∂à")
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityAiactivityBinding.inflate(layoutInflater)
        setContentView(binding.root)
        enableEdgeToEdge()
        
        // ÈöêËóèÊÇ¨ÊµÆÊåâÈíÆ
        hideFloatingIcon()

        // ÂàùÂßãÂåñAIËÅäÂ§©ÊúçÂä°
        aiChatService = AIChatService()

        // ÊµãËØïAIËøûÊé•
        CoroutineScope(Dispatchers.Main).launch {
            val isConnected = aiChatService.testConnection()
            if (isConnected) {
                android.util.Log.d("AIActivity", "AIÊúçÂä°ËøûÊé•Ê≠£Â∏∏")
            } else {
                android.util.Log.e("AIActivity", "AIÊúçÂä°ËøûÊé•Â§±Ë¥•")
                Toast.makeText(this@AIActivity, "AIÊúçÂä°ËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªú", Toast.LENGTH_LONG).show()
            }
        }

        // ‰∏ÄËøõÊù•ÊòæÁ§∫Ê¨¢ËøéËØ≠
        val welcomeMessage = ChatMessage(
            "HiÔºåÊàëÊòØ‰Ω†ÁöÑAIÊé®ËçêÂÆòShowGuideÔºÅÊó†ËÆ∫‰Ω†ÊÉ≥ÁúãÊºîÂî±‰ºö„ÄÅËØùÂâß„ÄÅÈü≥‰πêÂâß„ÄÅÁîµÂΩ±ÔºåËøòÊòØÊÉ≥ÊâæÂë®Êú´Â∏ÇÈõÜ„ÄÅËâ∫ÊúØÂ±ïËßà„ÄÅ‰∫≤Â≠êÊ¥ªÂä®Ôºå" +
            "ÊàëÈÉΩËÉΩÊ†πÊçÆ‰Ω†ÁöÑÂñúÂ•ΩÂ∏Æ‰Ω†Êé®ËçêÊúÄÂêàÈÄÇÁöÑÂéªÂ§Ñ„ÄÇÂè™Ë¶ÅÂëäËØâÊàë‰Ω†ÊÑüÂÖ¥Ë∂£ÁöÑÁ±ªÂûã„ÄÅÈ¢ÑÁÆóÂíåÊó•ÊúüÔºåÊàëÂ∞±ËÉΩ‰∏∫‰Ω†Á≠õÈÄâÊúÄÊñ∞ÊúÄÁÉ≠Èó®ÁöÑÁé©‰πêËµÑËÆØÔºå" +
            "ËÆ©‰Ω†ÁöÑ‰ºëÈó≤Êó∂ÂÖâÊõ¥Á≤æÂΩ©ÔºÅÂø´Êù•ÂíåÊàëËÅäËÅä‰Ω†ÁöÑÈúÄÊ±ÇÂêß~", 
            false
        )
        messages.add(welcomeMessage)
        
        // Âª∂ËøüÊòæÁ§∫‰ΩçÁΩÆÂíåÂ§©Ê∞î‰ø°ÊÅØ
        CoroutineScope(Dispatchers.Main).launch {
            kotlinx.coroutines.delay(2000) // Á≠âÂæÖ2ÁßíËÆ©‰ΩçÁΩÆÂíåÂ§©Ê∞î‰ø°ÊÅØËé∑ÂèñÂÆåÊàê
            if (currentCityName.isNotEmpty() && currentWeatherInfo.isNotEmpty()) {
                val locationMessage = ChatMessage(
                    "üìç ÂΩìÂâç‰ΩçÁΩÆÔºö$currentCityName\nüå§Ô∏è ‰ªäÊó•Â§©Ê∞îÔºö$currentWeatherInfo\n\nÊàëÂèØ‰ª•Ê†πÊçÆ‰Ω†ÁöÑ‰ΩçÁΩÆÂíåÂ§©Ê∞îÊÉÖÂÜµ‰∏∫‰Ω†Êé®ËçêÂêàÈÄÇÁöÑÊ¥ªÂä®ÔºÅ", 
                    false
                )
                messages.add(locationMessage)
                adapter.notifyItemInserted(messages.lastIndex)
                binding.recyclerViewMessages.scrollToPosition(messages.lastIndex)
            }
        }

        adapter = ChatAdapter(messages)
        binding.recyclerViewMessages.layoutManager = LinearLayoutManager(this)
        binding.recyclerViewMessages.adapter = adapter

        binding.buttonSend.setOnClickListener {
            sendMessage()
        }

        binding.voice.setOnClickListener {
            RecordDialogFragment { recognizedText ->
                binding.editTextMessage.setText(recognizedText)
            }.show(supportFragmentManager, "record")
        }

        // Ê∑±Â∫¶ÊÄùËÄÉÊåâÈíÆ
        binding.deepThinkingButton.setOnClickListener {
            isDeepThinkingEnabled = !isDeepThinkingEnabled
            updateDeepThinkingButton()
        }

        // ËÅîÁΩëÊêúÁ¥¢ÊåâÈíÆ
        binding.webSearchButton.setOnClickListener {
            isWebSearchEnabled = !isWebSearchEnabled
            updateWebSearchButton()
        }

        // ËæìÂÖ•Ê°ÜÁÇπÂáª‰∫ã‰ª∂ÔºàÁî®‰∫éÂõæÁâá‰∏ä‰º†Ôºâ
        binding.editTextMessage.setOnTouchListener { _, event ->
            // Ê£ÄÊü•ÊòØÂê¶ÁÇπÂáª‰∫ÜÁõ∏Êú∫ÂõæÊ†áÂå∫Âüü
            val drawableStart = binding.editTextMessage.compoundDrawables[0]
            if (drawableStart != null && event.x <= drawableStart.bounds.width() + binding.editTextMessage.paddingStart) {
                imagePickerLauncher.launch("image/*")
                true
            } else {
                false // ËÆ©ËæìÂÖ•Ê°ÜÊ≠£Â∏∏Â§ÑÁêÜÁÇπÂáª‰∫ã‰ª∂
            }
        }

        // ÂàùÂßãÂåñÊåâÈíÆÁä∂ÊÄÅ
        updateDeepThinkingButton()
        updateWebSearchButton()
        
        // ÂàùÂßãÂåñ‰ΩçÁΩÆÂ∑•ÂÖ∑Âπ∂Ëé∑ÂèñÂüéÂ∏ÇÂíåÂ§©Ê∞î‰ø°ÊÅØ
        locationUtils = Utils_Date_Location.LocationHelper(this)
        // ËØ∑Ê±ÇÂøÖË¶ÅÊùÉÈôê
        requestPermissionsIfNeeded()
    }

    private fun sendMessage() {
        val text = binding.editTextMessage.text.toString().trim()
        if (text.isEmpty() || isAiResponding) return

        // Â§ÑÁêÜÂõæÁâáÂàÜÊûêÔºàÊöÇÊó∂Á¶ÅÁî®ÂõæÁâáÂäüËÉΩÔºâ
        var finalText = text
        if (selectedImageUri != null) {
            Toast.makeText(this, "ÂõæÁâáÂàÜÊûêÂäüËÉΩÊöÇÊó∂‰∏çÂèØÁî®ÔºåËØ∑ÂèëÈÄÅÁ∫ØÊñáÊú¨Ê∂àÊÅØ", Toast.LENGTH_SHORT).show()
            selectedImageUri = null // Ê∏ÖÈô§Â∑≤ÈÄâÊã©ÁöÑÂõæÁâá
            return
        }

        // Ê∑ªÂä†Ê∑±Â∫¶ÊÄùËÄÉÊèêÁ§∫
        if (isDeepThinkingEnabled) {
            finalText = "ËØ∑Ê∑±Â∫¶ÊÄùËÄÉÂπ∂ËØ¶ÁªÜÂàÜÊûêÔºö$finalText"
        }

        // Ê∑ªÂä†Áî®Êà∑Ê∂àÊÅØ
        val userMessage = ChatMessage(finalText, true)
        messages.add(userMessage)
        adapter.notifyItemInserted(messages.lastIndex)
        binding.recyclerViewMessages.scrollToPosition(messages.lastIndex)
        binding.editTextMessage.text?.clear()

        // Ê∑ªÂä†Âà∞ÂØπËØùÂéÜÂè≤
        conversationHistory.add(AIChatService.ChatMessage("user", finalText))

        // ÊòæÁ§∫AIÊ≠£Âú®ÊÄùËÄÉÁöÑÊèêÁ§∫
        val thinkingMessage = ChatMessage("AIÊ≠£Âú®ÊÄùËÄÉ‰∏≠...", false)
        messages.add(thinkingMessage)
        adapter.notifyItemInserted(messages.lastIndex)
        binding.recyclerViewMessages.scrollToPosition(messages.lastIndex)

        // Ë∞ÉÁî®AIÊúçÂä°
        isAiResponding = true
        CoroutineScope(Dispatchers.Main).launch {
            try {
                aiChatService.sendMessageWithLocation(
                    userMessage = finalText,
                    conversationHistory = conversationHistory,
                    enableDeepThinking = isDeepThinkingEnabled,
                    enableWebSearch = isWebSearchEnabled,
                    cityName = currentCityName,
                    weatherInfo = currentWeatherInfo,
                    callback = object : AIChatService.StreamCallback {
                        override fun onPartialResponse(content: String) {
                            runOnUiThread {
                                // Êõ¥Êñ∞ÊúÄÂêé‰∏ÄÊù°Ê∂àÊÅØÔºàÊÄùËÄÉ‰∏≠...Ôºâ‰∏∫AIÁöÑÂõûÂ§ç
                                if (messages.isNotEmpty() && messages.last().content == "AIÊ≠£Âú®ÊÄùËÄÉ‰∏≠...") {
                                    messages[messages.lastIndex] = ChatMessage(content, false)
                                } else {
                                    // Â¶ÇÊûúÂ∑≤ÁªèÊúâAIÂõûÂ§çÔºåÂàôÊõ¥Êñ∞ÂÜÖÂÆπ
                                    if (messages.isNotEmpty() && !messages.last().isSentByUser) {
                                        messages[messages.lastIndex] = ChatMessage(content, false)
                                    } else {
                                        // Ê∑ªÂä†Êñ∞ÁöÑAIÂõûÂ§ç
                                        messages.add(ChatMessage(content, false))
                                    }
                                }
                                adapter.notifyDataSetChanged()
                                binding.recyclerViewMessages.scrollToPosition(messages.lastIndex)
                            }
                        }

                        override fun onCompleteResponse(content: String) {
                            runOnUiThread {
                                // Á°Æ‰øùÊúÄÁªàÂõûÂ§çÊ≠£Á°ÆÊòæÁ§∫
                                if (messages.isNotEmpty()) {
                                    messages[messages.lastIndex] = ChatMessage(content, false)
                                }
                                adapter.notifyDataSetChanged()
                                binding.recyclerViewMessages.scrollToPosition(messages.lastIndex)
                                
                                // Ê∑ªÂä†Âà∞ÂØπËØùÂéÜÂè≤
                                conversationHistory.add(AIChatService.ChatMessage("assistant", content))
                                isAiResponding = false
                            }
                        }

                        override fun onError(error: String) {
                            runOnUiThread {
                                // ÁßªÈô§ÊÄùËÄÉ‰∏≠ÁöÑÊ∂àÊÅØÔºåÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ
                                if (messages.isNotEmpty() && messages.last().content == "AIÊ≠£Âú®ÊÄùËÄÉ‰∏≠...") {
                                    messages.removeAt(messages.lastIndex)
                                }
                                messages.add(ChatMessage("Êä±Ê≠âÔºåAIÊúçÂä°ÊöÇÊó∂‰∏çÂèØÁî®Ôºö$error", false))
                                adapter.notifyDataSetChanged()
                                binding.recyclerViewMessages.scrollToPosition(messages.lastIndex)
                                isAiResponding = false
                                
                                Toast.makeText(this@AIActivity, "AIÊúçÂä°ÈîôËØØÔºö$error", Toast.LENGTH_LONG).show()
                            }
                        }
                    }
                )
            } catch (e: Exception) {
                runOnUiThread {
                    // ÁßªÈô§ÊÄùËÄÉ‰∏≠ÁöÑÊ∂àÊÅØÔºåÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ
                    if (messages.isNotEmpty() && messages.last().content == "AIÊ≠£Âú®ÊÄùËÄÉ‰∏≠...") {
                        messages.removeAt(messages.lastIndex)
                    }
                    messages.add(ChatMessage("Êä±Ê≠âÔºåÂèëÁîü‰∫ÜÁΩëÁªúÈîôËØØÔºö${e.message}", false))
                    adapter.notifyDataSetChanged()
                    binding.recyclerViewMessages.scrollToPosition(messages.lastIndex)
                    isAiResponding = false
                    
                    Toast.makeText(this@AIActivity, "ÁΩëÁªúÈîôËØØÔºö${e.message}", Toast.LENGTH_LONG).show()
                }
            }
        }
    }
    
    
    // ‰ª•‰∏ãÊùÉÈôêÂíåËØ≠Èü≥ËØÜÂà´ÈÄªËæë‰øùÊåÅ‰∏çÂèò
    private fun ensureAudioPermission() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO)
            != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.RECORD_AUDIO),
                REQUEST_RECORD_AUDIO
            )
        } else {
            startSpeechInput()
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int, permissions: Array<out String>, grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        when (requestCode) {
            REQUEST_RECORD_AUDIO -> {
                if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    startSpeechInput()
                } else {
                    Toast.makeText(this, "ÈúÄË¶ÅÂΩïÈü≥ÊùÉÈôêÊâçËÉΩËØÜÂà´ËØ≠Èü≥", Toast.LENGTH_SHORT).show()
                }
            }
            PICK_IMAGE_REQUEST_CODE -> {
                if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
                    getLocation()
                } else {
                    android.util.Log.w("AIActivity", "‰ΩçÁΩÆÊùÉÈôêË¢´ÊãíÁªù")
                    // Âç≥‰ΩøÊ≤°Êúâ‰ΩçÁΩÆÊùÉÈôêÔºå‰πüÂ∞ùËØï‰ΩøÁî®Â∑≤‰øùÂ≠òÁöÑÂüéÂ∏Ç‰ø°ÊÅØ
                    getLocationAndWeather()
                }
            }
        }
    }

    private fun startSpeechInput() {
        val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
            putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
            putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())
            putExtra(RecognizerIntent.EXTRA_PROMPT, "ËØ∑ËØ¥ËØù‚Ä¶")
        }
        try {
            startActivityForResult(intent, REQ_SPEECH)
        } catch (e: ActivityNotFoundException) {
            Toast.makeText(this, "ËÆæÂ§á‰∏çÊîØÊåÅËØ≠Èü≥ËØÜÂà´", Toast.LENGTH_SHORT).show()
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == REQ_SPEECH && resultCode == Activity.RESULT_OK) {
            val results = data?.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)
            val text = results?.firstOrNull().orEmpty()
            binding.editTextMessage.setText(text)
        }
    }
    
    private fun hideFloatingIcon() {
        try {
            val intent = Intent(this, FloatingIconService::class.java).apply {
                action = "hide"
            }
            startService(intent)
        } catch (e: Exception) {
            android.util.Log.e("AIActivity", "ÈöêËóèÊÇ¨ÊµÆÊåâÈíÆÂ§±Ë¥•", e)
        }
    }
    
    override fun onPause() {
        super.onPause()
        // ÊöÇÂÅúÊó∂ÊòæÁ§∫ÊÇ¨ÊµÆÊåâÈíÆ
        showFloatingIcon()
    }
    
    override fun onStop() {
        super.onStop()
        // ÂÅúÊ≠¢Êó∂ÊòæÁ§∫ÊÇ¨ÊµÆÊåâÈíÆ
        showFloatingIcon()
    }
    
    override fun onDestroy() {
        super.onDestroy()
        // ÈÄÄÂá∫AIÁïåÈù¢Êó∂ÊòæÁ§∫ÊÇ¨ÊµÆÊåâÈíÆ
        showFloatingIcon()
    }
    
    private fun showFloatingIcon() {
        try {
            val intent = Intent(this, FloatingIconService::class.java).apply {
                action = "show"
            }
            startService(intent)
            android.util.Log.d("AIActivity", "ÊòæÁ§∫ÊÇ¨ÊµÆÊåâÈíÆ")
        } catch (e: Exception) {
            android.util.Log.e("AIActivity", "ÊòæÁ§∫ÊÇ¨ÊµÆÊåâÈíÆÂ§±Ë¥•", e)
        }
    }

    private fun updateDeepThinkingButton() {
        if (isDeepThinkingEnabled) {
            binding.deepThinkingButton.setBackgroundResource(R.drawable.type_tag_background)
            binding.deepThinkingButton.setTextColor(ContextCompat.getColor(this, R.color.white))
            binding.deepThinkingButton.alpha = 1.0f
        } else {
            binding.deepThinkingButton.setBackgroundResource(R.drawable.button_unselected_background)
            binding.deepThinkingButton.setTextColor(ContextCompat.getColor(this, R.color.text_secondary))
            binding.deepThinkingButton.alpha = 1.0f
        }
    }

    private fun updateWebSearchButton() {
        if (isWebSearchEnabled) {
            binding.webSearchButton.setBackgroundResource(R.drawable.type_tag_background)
            binding.webSearchButton.setTextColor(ContextCompat.getColor(this, R.color.white))
            binding.webSearchButton.alpha = 1.0f
        } else {
            binding.webSearchButton.setBackgroundResource(R.drawable.button_unselected_background)
            binding.webSearchButton.setTextColor(ContextCompat.getColor(this, R.color.text_secondary))
            binding.webSearchButton.alpha = 1.0f
        }
    }

    private fun convertImageToBase64(uri: Uri): String? {
        return try {
            android.util.Log.d("AIActivity", "ÂºÄÂßãËΩ¨Êç¢ÂõæÁâá: $uri")
            val inputStream: InputStream? = contentResolver.openInputStream(uri)
            if (inputStream == null) {
                android.util.Log.e("AIActivity", "Êó†Ê≥ïÊâìÂºÄÂõæÁâáÊµÅ")
                return null
            }
            
            val bitmap = BitmapFactory.decodeStream(inputStream)
            inputStream.close()
            
            if (bitmap == null) {
                android.util.Log.e("AIActivity", "Êó†Ê≥ïËß£Á†ÅÂõæÁâá")
                return null
            }
            
            android.util.Log.d("AIActivity", "ÂéüÂßãÂõæÁâáÂ∞∫ÂØ∏: ${bitmap.width}x${bitmap.height}")
            
            // ÂéãÁº©ÂõæÁâá
            val compressedBitmap = compressBitmap(bitmap, 800, 600)
            android.util.Log.d("AIActivity", "ÂéãÁº©ÂêéÂõæÁâáÂ∞∫ÂØ∏: ${compressedBitmap.width}x${compressedBitmap.height}")
            
            val outputStream = ByteArrayOutputStream()
            compressedBitmap.compress(Bitmap.CompressFormat.JPEG, 80, outputStream)
            val byteArray = outputStream.toByteArray()
            outputStream.close()
            
            android.util.Log.d("AIActivity", "ÂõæÁâáÂ≠óËäÇÊï∞ÁªÑÂ§ßÂ∞è: ${byteArray.size}")
            val base64String = Base64.encodeToString(byteArray, Base64.DEFAULT)
            android.util.Log.d("AIActivity", "Base64Â≠óÁ¨¶‰∏≤ÈïøÂ∫¶: ${base64String.length}")
            
            base64String
        } catch (e: Exception) {
            android.util.Log.e("AIActivity", "ÂõæÁâáËΩ¨Êç¢Â§±Ë¥•", e)
            null
        }
    }

    private fun compressBitmap(bitmap: Bitmap, maxWidth: Int, maxHeight: Int): Bitmap {
        val width = bitmap.width
        val height = bitmap.height
        
        if (width <= maxWidth && height <= maxHeight) {
            return bitmap
        }
        
        val scaleWidth = maxWidth.toFloat() / width
        val scaleHeight = maxHeight.toFloat() / height
        val scale = minOf(scaleWidth, scaleHeight)
        
        val newWidth = (width * scale).toInt()
        val newHeight = (height * scale).toInt()
        
        return Bitmap.createScaledBitmap(bitmap, newWidth, newHeight, true)
    }
    
    /**
     * ËØ∑Ê±ÇÂøÖË¶ÅÊùÉÈôê
     */
    private fun requestPermissionsIfNeeded() {
        val perms = mutableListOf<String>()
        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_FINE_LOCATION)
            != PackageManager.PERMISSION_GRANTED) {
            perms += android.Manifest.permission.ACCESS_FINE_LOCATION
        }
        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.ACCESS_COARSE_LOCATION)
            != PackageManager.PERMISSION_GRANTED) {
            perms += android.Manifest.permission.ACCESS_COARSE_LOCATION
        }
        if (perms.isNotEmpty()) {
            ActivityCompat.requestPermissions(this, perms.toTypedArray(), PICK_IMAGE_REQUEST_CODE)
        } else {
            getLocation()
        }
    }
    
    
    /**
     * Ëé∑Âèñ‰ΩçÁΩÆ‰ø°ÊÅØÔºàÁõ¥Êé•Â§çÂà∂CreateRecordActivityÁöÑÈÄªËæëÔºâ
     */
    private fun getLocation() {
        android.util.Log.d("AIActivity", "ÂºÄÂßãËé∑ÂèñGPS‰ΩçÁΩÆ")
        locationUtils.getLocation { location ->
            if (location != null) {
                val (lat, lng) = location.latitude to location.longitude
                android.util.Log.d("AIActivity", "Ëé∑ÂèñÂà∞GPS‰ΩçÁΩÆ: $lng, $lat")
                CoroutineScope(Dispatchers.Main).launch { 
                    getCityIdSuspend("$lng,$lat") 
                }
            } else {
                android.util.Log.e("AIActivity", "GPS‰ΩçÁΩÆËé∑ÂèñÂ§±Ë¥•")
                // Â¶ÇÊûúGPSÂ§±Ë¥•ÔºåÂ∞ùËØï‰ΩøÁî®Â∑≤‰øùÂ≠òÁöÑÂüéÂ∏Ç‰ø°ÊÅØ
                getLocationAndWeather()
            }
        }
    }
    
    /**
     * Ëé∑Âèñ‰ΩçÁΩÆÂíåÂ§©Ê∞î‰ø°ÊÅØÔºàÂ§áÁî®ÊñπÊ°àÔºâ
     */
    private fun getLocationAndWeather() {
        android.util.Log.d("AIActivity", "‰ΩøÁî®Â§áÁî®ÊñπÊ°àËé∑Âèñ‰ΩçÁΩÆÂíåÂ§©Ê∞î‰ø°ÊÅØ")
        // Â∞ùËØï‰ªéPrefsManagerËé∑ÂèñÂ∑≤‰øùÂ≠òÁöÑÂüéÂ∏Ç‰ø°ÊÅØ
        val savedCityName = PrefsManager.getCityName(this)
        android.util.Log.d("AIActivity", "Â∑≤‰øùÂ≠òÁöÑÂüéÂ∏ÇÂêçÁß∞: $savedCityName")
        
        if (savedCityName.isNotEmpty()) {
            currentCityName = savedCityName
            // Ëé∑ÂèñËØ•ÂüéÂ∏ÇÁöÑÂ§©Ê∞î‰ø°ÊÅØ
            val cityId = PrefsManager.getCityId(this)
            android.util.Log.d("AIActivity", "Â∑≤‰øùÂ≠òÁöÑÂüéÂ∏ÇID: $cityId")
            if (cityId != -1) {
                CoroutineScope(Dispatchers.Main).launch {
                    getWeatherInfoSuspend(cityId.toString())
                }
            } else {
                currentWeatherInfo = "ÂüéÂ∏ÇIDÊó†Êïà"
                android.util.Log.w("AIActivity", "ÂüéÂ∏ÇIDÊó†Êïà: $cityId")
            }
        } else {
            currentCityName = "‰ΩçÁΩÆËé∑ÂèñÂ§±Ë¥•"
            currentWeatherInfo = "Â§©Ê∞î‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•"
            android.util.Log.e("AIActivity", "Ê≤°Êúâ‰øùÂ≠òÁöÑÂüéÂ∏Ç‰ø°ÊÅØ‰∏îGPSÂ§±Ë¥•")
        }
    }
    
    /**
     * Ê†πÊçÆÁªèÁ∫¨Â∫¶Ëé∑ÂèñÂüéÂ∏ÇID
     */
    private suspend fun getCityIdSuspend(location: String) {
        android.util.Log.d("AIActivity", "ÂºÄÂßãËé∑ÂèñÂüéÂ∏ÇIDÔºå‰ΩçÁΩÆ: $location")
        try {
            val service = RetrofitBuilder.getCityInstance.create(WeatherService::class.java)
            val resp = withContext(Dispatchers.IO) { service.getCity(apiKey, location) }
            android.util.Log.d("AIActivity", "ÂüéÂ∏ÇAPIÂìçÂ∫îÁä∂ÊÄÅ: ${resp.code()}")
            android.util.Log.d("AIActivity", "ÂüéÂ∏ÇAPIÂìçÂ∫î‰Ωì: ${resp.body()}")
            
            if (resp.isSuccessful && resp.body()?.code == "200") {
                resp.body()?.location?.firstOrNull()?.let { loc ->
                    android.util.Log.d("AIActivity", "Ëé∑ÂèñÂà∞ÂüéÂ∏Ç‰ø°ÊÅØ: ${loc.name}, ID: ${loc.id}")
                    withContext(Dispatchers.Main) {
                        currentCityName = loc.name
                    }
                    getWeatherInfoSuspend(loc.id)
                } ?: run {
                    android.util.Log.e("AIActivity", "ÂüéÂ∏Ç‰ø°ÊÅØ‰∏∫Á©∫")
                    withContext(Dispatchers.Main) {
                        currentCityName = "ÂüéÂ∏ÇËé∑ÂèñÂ§±Ë¥•"
                        currentWeatherInfo = "Â§©Ê∞î‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•"
                    }
                }
            } else {
                android.util.Log.e("AIActivity", "ÂüéÂ∏ÇAPIËØ∑Ê±ÇÂ§±Ë¥•: ${resp.code()}, ${resp.message()}")
                withContext(Dispatchers.Main) {
                    currentCityName = "ÂüéÂ∏ÇËé∑ÂèñÂ§±Ë¥•"
                    currentWeatherInfo = "Â§©Ê∞î‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•"
                }
            }
        } catch (e: Exception) {
            android.util.Log.e("AIActivity", "ÂüéÂ∏ÇAPIÁΩëÁªúËØ∑Ê±ÇÂºÇÂ∏∏", e)
            withContext(Dispatchers.Main) {
                currentCityName = "ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•"
                currentWeatherInfo = "Â§©Ê∞î‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•"
            }
        }
    }
    
    /**
     * Ê†πÊçÆÂüéÂ∏ÇIDËé∑ÂèñÂ§©Ê∞î‰ø°ÊÅØ
     */
    private suspend fun getWeatherInfoSuspend(cityId: String) {
        android.util.Log.d("AIActivity", "ÂºÄÂßãËé∑ÂèñÂ§©Ê∞î‰ø°ÊÅØÔºåÂüéÂ∏ÇID: $cityId")
        try {
            val service = RetrofitBuilder.getWeatherInstance.create(WeatherService::class.java)
            val resp = withContext(Dispatchers.IO) { service.getWeather(apiKey, cityId) }
            android.util.Log.d("AIActivity", "Â§©Ê∞îAPIÂìçÂ∫îÁä∂ÊÄÅ: ${resp.code()}")
            android.util.Log.d("AIActivity", "Â§©Ê∞îAPIÂìçÂ∫î‰Ωì: ${resp.body()}")
            
            if (resp.isSuccessful && resp.body()?.code == "200") {
                val today = Utils_Date_Location.formatDate(Calendar.getInstance().time)
                android.util.Log.d("AIActivity", "‰ªäÂ§©ÁöÑÊó•Êúü: $today")
                val todayWeather = resp.body()?.daily?.firstOrNull { it.fxDate == today }
                android.util.Log.d("AIActivity", "ÊâæÂà∞ÁöÑ‰ªäÊó•Â§©Ê∞î: $todayWeather")
                
                withContext(Dispatchers.Main) {
                    currentWeatherInfo = todayWeather?.textDay ?: "Â§©Ê∞î‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•"
                    android.util.Log.d("AIActivity", "ÊúÄÁªàÂ§©Ê∞î‰ø°ÊÅØ: $currentWeatherInfo")
                }
            } else {
                android.util.Log.e("AIActivity", "Â§©Ê∞îAPIËØ∑Ê±ÇÂ§±Ë¥•: ${resp.code()}, ${resp.message()}")
                withContext(Dispatchers.Main) {
                    currentWeatherInfo = "Â§©Ê∞î‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•"
                }
            }
        } catch (e: Exception) {
            android.util.Log.e("AIActivity", "Â§©Ê∞îAPIÁΩëÁªúËØ∑Ê±ÇÂºÇÂ∏∏", e)
            withContext(Dispatchers.Main) {
                currentWeatherInfo = "Â§©Ê∞î‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•"
            }
        }
    }
}
